<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/governing_dynamics/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/governing_dynamics/" rel="alternate" type="text/html" /><updated>2024-04-16T18:31:47-04:00</updated><id>http://localhost:4000/governing_dynamics/feed.xml</id><title type="html">Governing Dynamics</title><subtitle>Govering Dynamics is my blog where i am going to share my experience in  Software Security, Engineering leadership , Java Language, Algorithms, Economics</subtitle><entry><title type="html">Coverage is cheap, Can it catch bugs?</title><link href="http://localhost:4000/governing_dynamics/testing/2024/04/16/coverage-is-cheap-can-it-catch-bugs.html" rel="alternate" type="text/html" title="Coverage is cheap, Can it catch bugs?" /><published>2024-04-16T06:21:52-04:00</published><updated>2024-04-16T06:21:52-04:00</updated><id>http://localhost:4000/governing_dynamics/testing/2024/04/16/coverage-is-cheap-can-it-catch-bugs</id><content type="html" xml:base="http://localhost:4000/governing_dynamics/testing/2024/04/16/coverage-is-cheap-can-it-catch-bugs.html"><![CDATA[<p>While unit testing especially while working with reflective based frameworks like spring and jacksonparser much of the behaviour is decided at runtime.</p>

<p>When we go ahead and aggressively mock a lot of behaviour u end up testing nothing. It looks like we have test coverage for the area.
But much of the behavior of reflective-based apps are decided at runtime.</p>

<p>Traditional forms of test coverage like line and branch coverage don’t add much to testing value especially</p>

<p>in reflective environments.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">testGetResult</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">when</span><span class="o">(</span><span class="n">restTemplate</span><span class="o">.</span><span class="na">getForEntity</span><span class="o">(</span><span class="n">any</span><span class="o">(),</span> <span class="n">any</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">pltResult</span><span class="o">));</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">pltResult</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">getScanResult</span><span class="o">(</span><span class="s">"1"</span><span class="o">,</span><span class="s">"https://abc/123"</span><span class="o">));</span>
    <span class="o">}</span></code></pre></figure>

<p>When we mock restTemplate is this part of code u essentially test nothing. Things like parsing of objects and loading of the right resttempale and object mapper configuration are never tested</p>

<p>This is a classic case of mock everything and testing nothing. But we can show coverage that src part is touched by the test</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**
     * @TestPlan Set up the request and response for the libraries:coordSearch with the a wire mock server
     * and check if the client is able call the stub api and parse data successfully
     */</span>
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testGetScanResult</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">setField</span><span class="o">(</span><span class="n">platformClient</span><span class="o">,</span> <span class="s">"baseUrl"</span><span class="o">,</span> <span class="n">stubServer</span><span class="o">);</span>

        <span class="kd">final</span> <span class="kt">var</span> <span class="n">scanId</span> <span class="o">=</span> <span class="s">"scanid"</span><span class="o">;</span>
        <span class="kd">final</span> <span class="kt">var</span> <span class="n">scanuri</span> <span class="o">=</span> <span class="s">"/scanurl1"</span><span class="o">;</span>

        <span class="kd">final</span> <span class="kt">var</span> <span class="n">responseFile</span> <span class="o">=</span> <span class="nc">PlatformClientApiTest</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">"/platform/getplatscan.json"</span><span class="o">);</span>
        <span class="kd">final</span> <span class="kt">var</span> <span class="n">response</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readString</span><span class="o">(</span><span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">responseFile</span><span class="o">.</span><span class="na">toURI</span><span class="o">()));</span>

        <span class="kd">final</span> <span class="kt">var</span> <span class="n">uri</span> <span class="o">=</span> <span class="nc">UriComponentsBuilder</span><span class="o">.</span><span class="na">fromUriString</span><span class="o">(</span><span class="n">scanuri</span><span class="o">).</span><span class="na">build</span><span class="o">().</span><span class="na">toUri</span><span class="o">();</span>
        <span class="n">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">()))</span>
                <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">withBody</span><span class="o">(</span><span class="n">response</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">)</span>
                <span class="o">)</span>
        <span class="o">);</span>

        <span class="kd">final</span> <span class="kt">var</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">platformClient</span><span class="o">.</span><span class="na">getScanResult</span><span class="o">(</span><span class="n">scanId</span><span class="o">,</span> <span class="n">stubServer</span> <span class="o">+</span> <span class="n">scanuri</span><span class="o">);</span>

        <span class="n">assertEquals</span><span class="o">(</span><span class="s">"project-1"</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">getProjectId</span><span class="o">());</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="s">"space-1"</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">getWorkspaceName</span><span class="o">());</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="s">"maven:coord1:coord2:1.2"</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">getLibraryInstances</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getLibraryInstanceRef</span><span class="o">());</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="s">"SRCCLR-SID-1234"</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">getVulns</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getSrcclrId</span><span class="o">());</span>
    <span class="o">}</span></code></pre></figure>

<p>And use SpringbootTest which actually loads the config which would be loaded at runtime with appropriate TestProperties</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**
 * Tests the full functionality of the PlatformClientApi by setting up the wire mock with actual request and response
 * anc check if the parsing works without issues.
 */</span>
<span class="nd">@TestPropertySource</span><span class="o">(</span><span class="n">locations</span> <span class="o">=</span> <span class="s">"classpath:/tests.properties"</span><span class="o">)</span>
<span class="nd">@SpringBootTest</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">ClientConfigs</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">PlatformAuthInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlatformClientApiTest</span> <span class="o">{</span></code></pre></figure>

<p>When we rewrite this form a test. Suddenly the unit test tests a lot more of things. A real server is simulated by a wire mock. And also you test the real resttemplate config which would get created while one is running the code. Any reflective-based framework behavior would be known in the runtime and not in the compile time. So the test should simulate the actual running state of the code.</p>

<p>Testing DB interfaces </p>

<p>Another common mistake in test testing DB interfaces is to mock the JPA repository</p>

<p> </p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">LibraryInstanceServiceImplMethodsTest</span> <span class="o">{</span>

  <span class="c1">///////////////////////////// Class Attributes \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</span>

  <span class="c1">////////////////////////////// Class Methods \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</span>

  <span class="c1">//////////////////////////////// Attributes \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</span>

  <span class="nd">@Mock</span>
  <span class="kd">private</span> <span class="nc">LibraryInstanceRepository</span> <span class="n">instanceRepo</span><span class="o">;</span></code></pre></figure>

<p> The above test doesn’t not capture any bug with the repo part of code as its mostly would reflectively buy the hibernate framework and doesn’t test the sql part also </p>

<p> </p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@TestPropertySource</span><span class="o">(</span><span class="n">properties</span> <span class="o">=</span> <span class="o">{</span>
    <span class="s">"spring.flyway.enabled=true"</span><span class="o">,</span>
    <span class="s">"spring.jpa.hibernate.ddl-auto=create-drop"</span>
<span class="o">})</span>
<span class="nd">@DataJpaTest</span>
<span class="nd">@EnableJpaAuditing</span>
<span class="nd">@AutoConfigureTestDatabase</span><span class="o">(</span><span class="n">replace</span> <span class="o">=</span> <span class="nc">AutoConfigureTestDatabase</span><span class="o">.</span><span class="na">Replace</span><span class="o">.</span><span class="na">NONE</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span><span class="nc">TestWithTestContainerConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LibraryModifyServiceImplDataJpaTest</span> <span class="o">{</span>

  <span class="c1">//////////////////////////////// Attributes \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</span>

  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">LibraryInstanceRepository</span> <span class="n">instanceRepo</span><span class="o">;</span></code></pre></figure>

<p> The usage of data jpa test creates a full sql server environment and real query can tested to catch issues and bugs </p>

<p> </p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**
 * Test with updateSyncTimeTaken to check the update part works as expected.
 *
 * @implNote This tests adds concurrency test to check the Db access works in concurrent env.
 */</span>
<span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdateSyncTime</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
  <span class="kd">final</span> <span class="kt">var</span> <span class="n">updatedLibs</span> <span class="o">=</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">).</span><span class="na">mapToObj</span><span class="o">((</span><span class="n">x</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kt">var</span> <span class="n">library</span> <span class="o">=</span> <span class="n">createGenericLibrary</span><span class="o">(</span><span class="no">MAVEN</span><span class="o">);</span>
    <span class="kd">final</span> <span class="kt">var</span> <span class="n">savedLib</span> <span class="o">=</span> <span class="n">libraryRepo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">library</span><span class="o">);</span>
    <span class="n">libraryModifyService</span><span class="o">.</span><span class="na">updateSyncTimeTaken</span><span class="o">(</span><span class="n">savedLib</span><span class="o">,</span> <span class="mi">1000L</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">libraryLookupService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">savedLib</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
  <span class="o">})).</span><span class="na">map</span><span class="o">(</span><span class="nl">CompletableFuture:</span><span class="o">:</span><span class="n">join</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span>
  <span class="n">updatedLibs</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">library</span> <span class="o">-&gt;</span> <span class="n">assertEquals</span><span class="o">(</span><span class="mi">1000L</span><span class="o">,</span> <span class="n">library</span><span class="o">.</span><span class="na">getSyncTimeTaken</span><span class="o">()));</span></code></pre></figure>

<p> </p>

<p>So, the above tests the concurrency aspect of the updates and uses data JPA test to do real updates and test would have no meaning if the repo interface were mocked. </p>

<p> </p>

<p>Testing reflective code always has challenges as there is tendency to mock interfaces which me executed only at runtime. So traditional code coverage metrics may not tell if the code is well tested.</p>

<p>“Coverage is cheap, Can it catch bugs? is the real deal”.</p>

<p>So when you mock everything u test nothing. One may get good code coverage but cannot catch bugs</p>

<p>“Coverage is cheap, Can it catch bugs? is the real deal”.</p>]]></content><author><name></name></author><category term="Testing" /><summary type="html"><![CDATA[While unit testing especially while working with reflective based frameworks like spring and jacksonparser much of the behaviour is decided at runtime.]]></summary></entry><entry><title type="html">Parser Generators an Introduction</title><link href="http://localhost:4000/governing_dynamics/compilers/2024/04/15/parser-generator.html" rel="alternate" type="text/html" title="Parser Generators an Introduction" /><published>2024-04-15T06:21:52-04:00</published><updated>2024-04-15T06:21:52-04:00</updated><id>http://localhost:4000/governing_dynamics/compilers/2024/04/15/parser-generator</id><content type="html" xml:base="http://localhost:4000/governing_dynamics/compilers/2024/04/15/parser-generator.html"><![CDATA[<h3 id="prologue">Prologue</h3>
<p>The first stage of the compilation process is the parsing and understanding of the syntax of a language. The Parsers job is to look at code and make sure it follows the approved syntax of the grammar and also manipulate code structure to add or extract information</p>

<h3 id="what-are-parser-generators">What are Parser Generators</h3>
<p>Programs that recognize languages are called parsers or syntax analyzers. A grammar is just a set of rules, each one expressing the structure of a phrase. The ANTLR tool and tools like yaac translate grammar to parsers which are ready-made codes to parse the defined language in the grammar. Grammars themselves follow the syntax of a language optimized for specifying other languages</p>

<h3 id="an-example-of-a-grammar">An example of a grammar</h3>
<p>The grammar below can be used to parse an array of integers.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">grammar</span> <span class="no">ArrayInit</span><span class="p">;</span>
<span class="n">init</span> <span class="p">:</span> <span class="s1">'{'</span> <span class="n">value</span> <span class="p">(</span><span class="s1">','</span> <span class="n">value</span><span class="p">)</span><span class="o">*</span> <span class="s1">'}'</span> <span class="p">;</span> <span class="c1"># define a array</span>
<span class="n">value</span> <span class="p">:</span> <span class="n">init</span> <span class="c1"># define the value as an INT Type</span>
      <span class="o">|</span> <span class="no">INT</span>
      <span class="p">;</span>
<span class="no">INT</span> <span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span> <span class="p">;</span> <span class="c1"># define what is an INT</span>
<span class="no">WS</span> <span class="p">:</span> <span class="p">[</span> <span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">n</span><span class="p">]</span><span class="o">+</span> <span class="o">-&gt;</span> <span class="n">skip</span> <span class="p">;</span> <span class="c1"># Skip white spaces</span></code></pre></figure>

<h3 id="how-to-organize-code">How to organize code</h3>

<p>We can organize the code in the following way for Antlr to generate parsers from the g4 file. Keep the <code class="language-plaintext highlighter-rouge">g4</code> files in a <code class="language-plaintext highlighter-rouge">antlr4</code> directory and make sure the package structure matches between the <code class="language-plaintext highlighter-rouge">java</code> code and <code class="language-plaintext highlighter-rouge">antlr4</code></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">└── exampleAntlr
    ├── LICENSE
    ├── README.md
    ├── exampleAntlr.iml
    ├── pom.xml
    ├── src
    │   └── main
    │       ├── antlr4
    │       │   └── com
    │       │       └── srini
    │       │           └── antrl4
    │       │               ├── ArrayInit.g4
    │       ├── java
    │       │   └── com
    │       │       └── srini
    │       │           └── antrl4
    │       │               └── TestAntlr.java</code></pre></figure>

<h3 id="run-the-generated-parser">Run the generated parser</h3>
<p>A Maven install can generate the lexer parser for the g4 grammar. 
The below code can take an array like <code class="language-plaintext highlighter-rouge">{1,2,3,4}</code> and parse it and form the tree of its components.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nc">ANTLRInputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ANTLRInputStream</span><span class="o">(</span><span class="s">"{1,2,3,4}"</span><span class="o">);</span>
<span class="nc">ArrayInitLexer</span> <span class="n">lexer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayInitLexer</span><span class="o">(</span><span class="n">input</span><span class="o">);</span> 
<span class="nc">CommonTokenStream</span> <span class="n">tokens</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CommonTokenStream</span><span class="o">(</span><span class="n">lexer</span><span class="o">);</span>
<span class="nc">ArrayInitParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayInitParser</span><span class="o">(</span><span class="n">tokens</span><span class="o">);</span>
<span class="nc">ParseTree</span> <span class="n">tree</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tree</span><span class="o">.</span><span class="na">toStringTree</span><span class="o">(</span><span class="n">parser</span><span class="o">));</span></code></pre></figure>

<h3 id="the-output-of-the-parser">The output of the parser</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">(</span>init <span class="o">{</span> <span class="o">(</span>value 1<span class="o">)</span> , <span class="o">(</span>value 2<span class="o">)</span> , <span class="o">(</span>value 3<span class="o">)</span> , <span class="o">(</span>value 4<span class="o">)</span> <span class="o">})</span></code></pre></figure>

<p>So the parser has taken the array and broken it down to its components of array start token the integer values and the array end token.Now when we look at grammar syntax we can relate to it better.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">init {</code> refers to the start of an array represented in the grammar line no 1<code class="language-plaintext highlighter-rouge">init : '{' </code></li>
  <li><code class="language-plaintext highlighter-rouge">value</code> is the Integer values of the array</li>
</ul>

<h3 id="a-bad-input">A bad input</h3>

<p>If we have input like <code class="language-plaintext highlighter-rouge">{1,2,3sadas,4}</code>  which has a bad integer in the array then the parser would generate an error</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">line 1:6 token recognition error at: <span class="s1">'s'</span>
line 1:7 token recognition error at: <span class="s1">'a'</span>
line 1:8 token recognition error at: <span class="s1">'d'</span>
line 1:9 token recognition error at: <span class="s1">'a'</span>
line 1:10 token recognition error at: <span class="s1">'s'</span></code></pre></figure>]]></content><author><name></name></author><category term="Compilers" /><summary type="html"><![CDATA[Prologue The first stage of the compilation process is the parsing and understanding of the syntax of a language. The Parsers job is to look at code and make sure it follows the approved syntax of the grammar and also manipulate code structure to add or extract information]]></summary></entry><entry><title type="html">Principles of technology leadership</title><link href="http://localhost:4000/governing_dynamics/engineering/leadership/2024/04/15/principles-of-technology-leadership.html" rel="alternate" type="text/html" title="Principles of technology leadership" /><published>2024-04-15T06:21:52-04:00</published><updated>2024-04-15T06:21:52-04:00</updated><id>http://localhost:4000/governing_dynamics/engineering/leadership/2024/04/15/principles-of-technology-leadership</id><content type="html" xml:base="http://localhost:4000/governing_dynamics/engineering/leadership/2024/04/15/principles-of-technology-leadership.html"><![CDATA[<h3 id="prologue">Prologue</h3>
<p>As an engineer in a tech company, you sit for a talk from the leadership. After the customary praise and motivation to the team saying the team is awesome and we need to push further, the leadership puts together a set of principles that would define the direction of engineering. An example of would at a very high level would be the famous quote of <strong>Move fast and break things</strong> . As engineers scratch their heads with <strong>break things quote</strong> this becomes viral and every other company wants to <strong>Move fast and break things</strong></p>

<h3 id="technology-leadership">Technology leadership</h3>
<p>As a tech leader from the lead of the team to an architect to an org. The first rule is never to copy other company’s principles in whatever form. First, it would sound cringe and un-original but there are deeper problems of adopting other companies’ principles. The context for <strong>Move Fast and Break Things</strong> may apply to startup although <strong>break things</strong> does not apply to any type of org. It’s not fun when u <strong>Break Things</strong> and sit with an angry customer who is baying for your blood. But this context may not apply to a place where you are writing mission-critical software where cost of moving fast and breaking things may be too high probably even lives</p>

<h3 id="how-to-form-the-principles-in-the-first-place">How to form the principles in the first place</h3>

<p>As a tech leader before forming high-level principles, the tech leader has to stand in the trenches with engineers, customer support, and sales and have a deep understanding of issues.</p>

<p>An example of when the tech lead of the Java Language came up with his principle for how the Java language to move forward he came with the statement <strong>Move Deliberately and Don’t Break Things</strong>. This may sound like a cringe reply but it has deeper meaning. Java as a language supports thousands of mission-critical software and every release of the Java language version should support an old dusty jar written in the early 2000s and it is expected to run faster than the older version of Java.</p>

<p>So Java does not need a hip engineer creating the latest cool language feature and probably breaking backward compatibly and putting forward a huge support burden in the future to support the new shiny feature. Java language features need huge deliberation before something is put out and a long support for it.</p>

<h3 id="principle-worth-enough-to-copy">Principle worth enough to copy</h3>
<p>The erstwhile CEO of SUN Scot McNealy set the principle of SUN as <strong>Kick But Have fun Dont cheat customers</strong>. Well, that resulted in some of the greatest innovations like Solaris zones( precursor to docker) , the networking stack, the Java language, etc. Again I may sound like a fanboy but the idea is leadership principles should be grounded in the reality of the product that the company builds, deep thought about the customers who are using the product, and the smart engineer, support, and sales who stand in  the trenches build and supports the product</p>]]></content><author><name></name></author><category term="Engineering" /><category term="Leadership" /><summary type="html"><![CDATA[Prologue As an engineer in a tech company, you sit for a talk from the leadership. After the customary praise and motivation to the team saying the team is awesome and we need to push further, the leadership puts together a set of principles that would define the direction of engineering. An example of would at a very high level would be the famous quote of Move fast and break things . As engineers scratch their heads with break things quote this becomes viral and every other company wants to Move fast and break things]]></summary></entry></feed>